import torchimport torch.nn as nn                        def enable_dropout(m):    """    Parameters    ----------    m : submodule of a Pytorch model    Activates dropout layers independently    """    if type(m) == nn.Dropout:        m.train()        def flatten(lst):    tmp = [i.contiguous().view(-1, 1) for i in lst]    return torch.cat(tmp).view(-1)def unflatten_like(vector, likeTensorList):    # Takes a flat torch.tensor and unflattens it to a list of torch.tensors    #    shaped like likeTensorList    outList = []    i = 0    for tensor in likeTensorList:        # n = module._parameters[name].numel()        n = tensor.numel()        outList.append(vector[:, i : i + n].view(tensor.shape))        i += n    return outList